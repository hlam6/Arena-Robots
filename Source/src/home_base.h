/**
 * @file home_base.h
 *
 * @copyright 2017 3081 Staff, All rights reserved.
 */

#ifndef SRC_HOME_BASE_H_
#define SRC_HOME_BASE_H_

/*******************************************************************************
 * Includes
 ******************************************************************************/
#include <time.h>
#include <stdlib.h>
#include <string>
#include <random>
#include "src/home_base_params.h"
#include "src/arena_immobile_entity.h"
#include "src/arena_mobile_entity.h"
#include "src/robot_motion_handler.h"
#include "src/robot_motion_behavior.h"
#include "src/sensor_touch.h"
#include "src/event_collision.h"
#include "src/event_recharge.h"

/*******************************************************************************
 * Namespaces
 ******************************************************************************/
NAMESPACE_BEGIN(csci3081);

/*******************************************************************************
 * Class Definitions
 ******************************************************************************/
 /** Note:
  * This class had its inheritance changed from ArenaImmobileEntity to
  * ArenaMobileEntity. This is for ease of use, such as providing HomeBase
  * with members that are useful in calculating movement in the arena, namely
  * heading_angle_. The components of robot useful for movement were also
  * added to HomeBase, namely RobotMotionHandler, RobotMotionBehavior, and
  * SensorTouch. Getters and setters are also added for the new private
  * members.
  */

 /**
 * @brief Mobile entity that if the robot collides against,
 * the player wins the game.
 */

class HomeBase : public ArenaMobileEntity {
 public:
  explicit HomeBase(const struct home_base_params* const params) :
    ArenaMobileEntity(params->radius, params->collision_delta,
                      params->pos, params->color),
    heading_angle_(50),
    motion_handler_(),
    motion_behavior_(),
    sensor_touch_() {
      motion_handler_.heading_angle(45);
      motion_handler_.speed(10);
    }
  std::string name(void) const { return "Home Base"; }
  /**
  * @brief The heading angle, and position of the HomeBase are updated.
  *
  * A random number generator creatively named generator is responsible for
  * causing the HomeBase to move randomly. The seed is generated by calling
  * time(NULL) which returns the current time.
  *
  * @param dt uint representing change in time
  *
  * @return nothing
  */
  void TimestepUpdate(uint dt) {
    // Use velocity and position to update position
    motion_handler_.UpdateVelocity(sensor_touch_);
    motion_behavior_.UpdatePosition(this, dt);
    /* Use system time to generate reliable seed with decent entropy,
    */
    unsigned seed = time(NULL);
    std::minstd_rand0 generator(seed%100);
    int random_int = generator();

    // Arbitrary integer used to determine random movement
    // HomeBase turns a random angle.
    if (random_int % 5 == 0) {
      motion_handler_.heading_angle((random_int/180) * M_PI);
    }
  } /* TimestepUpdate() */
  /**
  * @brief Returns the motion_handler_'s speed, which is
  * equivalent to the Robot's speed.
  * @return speed_
  */
  double get_speed(void) { return motion_handler_.speed(); }

  /**
  * @brief Set a new speed.
  *
  * @param[in] sp Double used to update the speed
  */
  void set_speed(double sp) { motion_handler_.speed(sp); }

  /**
  * @brief Inherited from ArenaMobileEntity, not implemented in HomeBase
  * due to HomeBase not having a RobotBattery; no need for recharge.
  */
  void Accept(EventRecharge * e) {
  }

  /**
  * @brief Passes an EventCollision object to the HomeBase's SensorTouch,
  * returns nothing.
  * @param e Pointer to an EventCollision object
  *
  */
  void Accept(EventCollision * e) {
    sensor_touch_.Accept(e);
  }
  /**
  * @brief Returns the motion_handler_'s heading_angle, which is
  * equivalent to the Robot's heading_angle.
  *
  * @return heading_angle_
  */
  double get_heading_angle(void) const { return motion_handler_.heading_angle(); }
  /**
  * @brief Set a new heading angle.
  *
  * @param[in] ha Double used to update the heading angle
  */
  void set_heading_angle(double ha) { motion_handler_.heading_angle(ha); }

 private:
  RobotMotionBehavior motion_behavior_;
  RobotMotionHandler motion_handler_;
  SensorTouch sensor_touch_;
  double heading_angle_;
  double angle_delta_;
};

NAMESPACE_END(csci3081);

#endif  // SRC_HOME_BASE_H_
